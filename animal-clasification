# -*- coding: utf-8 -*-
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from PIL import Image
import os

directory = r'C:\Users\Richar\Desktop\ciencia de datos\Animals-10\Animals-10'
datagen = ImageDataGenerator(rescale=1./255, validation_split=0.25, rotation_range=20, width_shift_range=0.2, height_shift_range=0.2, shear_range=0.2, zoom_range=0.2, horizontal_flip=True, fill_mode='nearest')
train_generator = datagen.flow_from_directory(directory, target_size=(100, 100), batch_size=32, class_mode='categorical', subset='training')
val_generator = datagen.flow_from_directory(directory, target_size=(100, 100), batch_size=32, class_mode='categorical', subset='validation')

model = keras.Sequential([
    layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(100, 100, 3)),
    layers.MaxPooling2D(pool_size=(2,2)),
    layers.Conv2D(64, kernel_size=(3,3), activation='relu'),
    layers.MaxPooling2D(pool_size=(2,2)),
    layers.Conv2D(128, kernel_size=(3,3), activation='relu'),
    layers.MaxPooling2D(pool_size=(2,2)),
    layers.Flatten(),
    layers.Dense(580, activation='relu'),
    layers.Dropout(0.2),
    layers.Dense(len(train_generator.class_indices), activation='softmax')
])

model.summary()
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

epochs = 15
history = model.fit(train_generator, steps_per_epoch=train_generator.samples // train_generator.batch_size, validation_data=val_generator, validation_steps=val_generator.samples // val_generator.batch_size, epochs=epochs)

test_loss, test_acc = model.evaluate(val_generator, verbose=0)
print(f"\nPrecisión en el conjunto de validación: {test_acc:.4f}")

plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Precisión en entrenamiento')
plt.plot(history.history['val_accuracy'], label='Precisión en validación')
plt.title('Precisión durante el entrenamiento')
plt.xlabel('Época')
plt.ylabel('Precisión')
plt.legend()
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Pérdida en entrenamiento')
plt.plot(history.history['val_loss'], label='Pérdida en validación')
plt.title('Pérdida durante el entrenamiento')
plt.xlabel('Época')
plt.ylabel('Pérdida')
plt.legend()
plt.show()

val_images, val_labels = next(val_generator)
predictions = model.predict(val_images)
predicted_labels = np.argmax(predictions, axis=1)
true_labels = np.argmax(val_labels, axis=1)
class_names = list(train_generator.class_indices.keys())

plt.figure(figsize=(15, 15))
for i in range(min(25, len(val_images))):
    plt.subplot(5, 5, i+1)
    plt.imshow(val_images[i])
    color = 'green' if predicted_labels[i] == true_labels[i] else 'red'
    plt.title(f'Pred: {class_names[predicted_labels[i]]}\nReal: {class_names[true_labels[i]]}', color=color, fontsize=8)
    plt.axis('off')
plt.tight_layout()
plt.show()
